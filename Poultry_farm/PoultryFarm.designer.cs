#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Poultry_farm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PoultryFarm")]
	public partial class PoultryFarmDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBreed(Breed instance);
    partial void UpdateBreed(Breed instance);
    partial void DeleteBreed(Breed instance);
    partial void InsertWorkshop(Workshop instance);
    partial void UpdateWorkshop(Workshop instance);
    partial void DeleteWorkshop(Workshop instance);
    partial void InsertCage(Cage instance);
    partial void UpdateCage(Cage instance);
    partial void DeleteCage(Cage instance);
    partial void InsertChicken(Chicken instance);
    partial void UpdateChicken(Chicken instance);
    partial void DeleteChicken(Chicken instance);
    partial void InsertDiet(Diet instance);
    partial void UpdateDiet(Diet instance);
    partial void DeleteDiet(Diet instance);
    partial void InsertProduction(Production instance);
    partial void UpdateProduction(Production instance);
    partial void DeleteProduction(Production instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    #endregion
		
		public PoultryFarmDataContext() : 
				base(global::Poultry_farm.Properties.Settings.Default.PoultryFarmConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PoultryFarmDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoultryFarmDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoultryFarmDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PoultryFarmDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Breed> Breeds
		{
			get
			{
				return this.GetTable<Breed>();
			}
		}
		
		public System.Data.Linq.Table<Workshop> Workshops
		{
			get
			{
				return this.GetTable<Workshop>();
			}
		}
		
		public System.Data.Linq.Table<Cage> Cages
		{
			get
			{
				return this.GetTable<Cage>();
			}
		}
		
		public System.Data.Linq.Table<Chicken> Chickens
		{
			get
			{
				return this.GetTable<Chicken>();
			}
		}
		
		public System.Data.Linq.Table<Diet> Diets
		{
			get
			{
				return this.GetTable<Diet>();
			}
		}
		
		public System.Data.Linq.Table<Production> Productions
		{
			get
			{
				return this.GetTable<Production>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Breeds")]
	public partial class Breed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BreedName;
		
		private int _AverageEggsNumber;
		
		private double _AverageWeight;
		
		private int _IdDietNumber;
		
		private EntitySet<Chicken> _Chickens;
		
		private EntityRef<Diet> _Diet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBreedNameChanging(string value);
    partial void OnBreedNameChanged();
    partial void OnAverageEggsNumberChanging(int value);
    partial void OnAverageEggsNumberChanged();
    partial void OnAverageWeightChanging(double value);
    partial void OnAverageWeightChanged();
    partial void OnIdDietNumberChanging(int value);
    partial void OnIdDietNumberChanged();
    #endregion
		
		public Breed()
		{
			this._Chickens = new EntitySet<Chicken>(new Action<Chicken>(this.attach_Chickens), new Action<Chicken>(this.detach_Chickens));
			this._Diet = default(EntityRef<Diet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreedName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string BreedName
		{
			get
			{
				return this._BreedName;
			}
			set
			{
				if ((this._BreedName != value))
				{
					this.OnBreedNameChanging(value);
					this.SendPropertyChanging();
					this._BreedName = value;
					this.SendPropertyChanged("BreedName");
					this.OnBreedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageEggsNumber", DbType="Int NOT NULL")]
		public int AverageEggsNumber
		{
			get
			{
				return this._AverageEggsNumber;
			}
			set
			{
				if ((this._AverageEggsNumber != value))
				{
					this.OnAverageEggsNumberChanging(value);
					this.SendPropertyChanging();
					this._AverageEggsNumber = value;
					this.SendPropertyChanged("AverageEggsNumber");
					this.OnAverageEggsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageWeight", DbType="Float NOT NULL")]
		public double AverageWeight
		{
			get
			{
				return this._AverageWeight;
			}
			set
			{
				if ((this._AverageWeight != value))
				{
					this.OnAverageWeightChanging(value);
					this.SendPropertyChanging();
					this._AverageWeight = value;
					this.SendPropertyChanged("AverageWeight");
					this.OnAverageWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDietNumber", DbType="Int NOT NULL")]
		public int IdDietNumber
		{
			get
			{
				return this._IdDietNumber;
			}
			set
			{
				if ((this._IdDietNumber != value))
				{
					if (this._Diet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDietNumberChanging(value);
					this.SendPropertyChanging();
					this._IdDietNumber = value;
					this.SendPropertyChanged("IdDietNumber");
					this.OnIdDietNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Breed_Chicken", Storage="_Chickens", ThisKey="Id", OtherKey="IdBreed")]
		public EntitySet<Chicken> Chickens
		{
			get
			{
				return this._Chickens;
			}
			set
			{
				this._Chickens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diet_Breed", Storage="_Diet", ThisKey="IdDietNumber", OtherKey="Id", IsForeignKey=true)]
		public Diet Diet
		{
			get
			{
				return this._Diet.Entity;
			}
			set
			{
				Diet previousValue = this._Diet.Entity;
				if (((previousValue != value) 
							|| (this._Diet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Diet.Entity = null;
						previousValue.Breeds.Remove(this);
					}
					this._Diet.Entity = value;
					if ((value != null))
					{
						value.Breeds.Add(this);
						this._IdDietNumber = value.Id;
					}
					else
					{
						this._IdDietNumber = default(int);
					}
					this.SendPropertyChanged("Diet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chickens(Chicken entity)
		{
			this.SendPropertyChanging();
			entity.Breed = this;
		}
		
		private void detach_Chickens(Chicken entity)
		{
			this.SendPropertyChanging();
			entity.Breed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workshop")]
	public partial class Workshop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ShopName;
		
		private int _NumberOfRows;
		
		private int _NumberOfCages;
		
		private EntitySet<Cage> _Cages;
		
		private EntitySet<Worker> _Workers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnShopNameChanging(string value);
    partial void OnShopNameChanged();
    partial void OnNumberOfRowsChanging(int value);
    partial void OnNumberOfRowsChanged();
    partial void OnNumberOfCagesChanging(int value);
    partial void OnNumberOfCagesChanged();
    #endregion
		
		public Workshop()
		{
			this._Cages = new EntitySet<Cage>(new Action<Cage>(this.attach_Cages), new Action<Cage>(this.detach_Cages));
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShopName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string ShopName
		{
			get
			{
				return this._ShopName;
			}
			set
			{
				if ((this._ShopName != value))
				{
					this.OnShopNameChanging(value);
					this.SendPropertyChanging();
					this._ShopName = value;
					this.SendPropertyChanged("ShopName");
					this.OnShopNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRows", DbType="Int NOT NULL")]
		public int NumberOfRows
		{
			get
			{
				return this._NumberOfRows;
			}
			set
			{
				if ((this._NumberOfRows != value))
				{
					this.OnNumberOfRowsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRows = value;
					this.SendPropertyChanged("NumberOfRows");
					this.OnNumberOfRowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCages", DbType="Int NOT NULL")]
		public int NumberOfCages
		{
			get
			{
				return this._NumberOfCages;
			}
			set
			{
				if ((this._NumberOfCages != value))
				{
					this.OnNumberOfCagesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCages = value;
					this.SendPropertyChanged("NumberOfCages");
					this.OnNumberOfCagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workshop_Cage", Storage="_Cages", ThisKey="Id", OtherKey="IdWorkshop")]
		public EntitySet<Cage> Cages
		{
			get
			{
				return this._Cages;
			}
			set
			{
				this._Cages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workshop_Worker", Storage="_Workers", ThisKey="Id", OtherKey="IdWorkshop")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Workshop = this;
		}
		
		private void detach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Workshop = null;
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Workshop = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Workshop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cages")]
	public partial class Cage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdWorkshop;
		
		private int _IdChicken;
		
		private int _IdWorker;
		
		private int _RowNumber;
		
		private int _CageNumber;
		
		private EntityRef<Workshop> _Workshop;
		
		private EntityRef<Chicken> _Chicken;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdWorkshopChanging(int value);
    partial void OnIdWorkshopChanged();
    partial void OnIdChickenChanging(int value);
    partial void OnIdChickenChanged();
    partial void OnIdWorkerChanging(int value);
    partial void OnIdWorkerChanged();
    partial void OnRowNumberChanging(int value);
    partial void OnRowNumberChanged();
    partial void OnCageNumberChanging(int value);
    partial void OnCageNumberChanged();
    #endregion
		
		public Cage()
		{
			this._Workshop = default(EntityRef<Workshop>);
			this._Chicken = default(EntityRef<Chicken>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorkshop", DbType="Int NOT NULL")]
		public int IdWorkshop
		{
			get
			{
				return this._IdWorkshop;
			}
			set
			{
				if ((this._IdWorkshop != value))
				{
					if (this._Workshop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWorkshopChanging(value);
					this.SendPropertyChanging();
					this._IdWorkshop = value;
					this.SendPropertyChanged("IdWorkshop");
					this.OnIdWorkshopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdChicken", DbType="Int NOT NULL")]
		public int IdChicken
		{
			get
			{
				return this._IdChicken;
			}
			set
			{
				if ((this._IdChicken != value))
				{
					if (this._Chicken.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChickenChanging(value);
					this.SendPropertyChanging();
					this._IdChicken = value;
					this.SendPropertyChanged("IdChicken");
					this.OnIdChickenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorker", DbType="Int NOT NULL")]
		public int IdWorker
		{
			get
			{
				return this._IdWorker;
			}
			set
			{
				if ((this._IdWorker != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWorkerChanging(value);
					this.SendPropertyChanging();
					this._IdWorker = value;
					this.SendPropertyChanged("IdWorker");
					this.OnIdWorkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int NOT NULL")]
		public int RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CageNumber", DbType="Int NOT NULL")]
		public int CageNumber
		{
			get
			{
				return this._CageNumber;
			}
			set
			{
				if ((this._CageNumber != value))
				{
					this.OnCageNumberChanging(value);
					this.SendPropertyChanging();
					this._CageNumber = value;
					this.SendPropertyChanged("CageNumber");
					this.OnCageNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workshop_Cage", Storage="_Workshop", ThisKey="IdWorkshop", OtherKey="Id", IsForeignKey=true)]
		public Workshop Workshop
		{
			get
			{
				return this._Workshop.Entity;
			}
			set
			{
				Workshop previousValue = this._Workshop.Entity;
				if (((previousValue != value) 
							|| (this._Workshop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workshop.Entity = null;
						previousValue.Cages.Remove(this);
					}
					this._Workshop.Entity = value;
					if ((value != null))
					{
						value.Cages.Add(this);
						this._IdWorkshop = value.Id;
					}
					else
					{
						this._IdWorkshop = default(int);
					}
					this.SendPropertyChanged("Workshop");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Cage", Storage="_Chicken", ThisKey="IdChicken", OtherKey="Id", IsForeignKey=true)]
		public Chicken Chicken
		{
			get
			{
				return this._Chicken.Entity;
			}
			set
			{
				Chicken previousValue = this._Chicken.Entity;
				if (((previousValue != value) 
							|| (this._Chicken.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chicken.Entity = null;
						previousValue.Cages.Remove(this);
					}
					this._Chicken.Entity = value;
					if ((value != null))
					{
						value.Cages.Add(this);
						this._IdChicken = value.Id;
					}
					else
					{
						this._IdChicken = default(int);
					}
					this.SendPropertyChanged("Chicken");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Cage", Storage="_Worker", ThisKey="IdWorker", OtherKey="Id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Cages.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Cages.Add(this);
						this._IdWorker = value.Id;
					}
					else
					{
						this._IdWorker = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chickens")]
	public partial class Chicken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdBreed;
		
		private double _ChickenWeight;
		
		private int _ChickenAge;
		
		private EntitySet<Cage> _Cages;
		
		private EntitySet<Production> _Productions;
		
		private EntityRef<Breed> _Breed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdBreedChanging(int value);
    partial void OnIdBreedChanged();
    partial void OnChickenWeightChanging(double value);
    partial void OnChickenWeightChanged();
    partial void OnChickenAgeChanging(int value);
    partial void OnChickenAgeChanged();
    #endregion
		
		public Chicken()
		{
			this._Cages = new EntitySet<Cage>(new Action<Cage>(this.attach_Cages), new Action<Cage>(this.detach_Cages));
			this._Productions = new EntitySet<Production>(new Action<Production>(this.attach_Productions), new Action<Production>(this.detach_Productions));
			this._Breed = default(EntityRef<Breed>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBreed", DbType="Int NOT NULL")]
		public int IdBreed
		{
			get
			{
				return this._IdBreed;
			}
			set
			{
				if ((this._IdBreed != value))
				{
					if (this._Breed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBreedChanging(value);
					this.SendPropertyChanging();
					this._IdBreed = value;
					this.SendPropertyChanged("IdBreed");
					this.OnIdBreedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChickenWeight", DbType="Float NOT NULL")]
		public double ChickenWeight
		{
			get
			{
				return this._ChickenWeight;
			}
			set
			{
				if ((this._ChickenWeight != value))
				{
					this.OnChickenWeightChanging(value);
					this.SendPropertyChanging();
					this._ChickenWeight = value;
					this.SendPropertyChanged("ChickenWeight");
					this.OnChickenWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChickenAge", DbType="Int NOT NULL")]
		public int ChickenAge
		{
			get
			{
				return this._ChickenAge;
			}
			set
			{
				if ((this._ChickenAge != value))
				{
					this.OnChickenAgeChanging(value);
					this.SendPropertyChanging();
					this._ChickenAge = value;
					this.SendPropertyChanged("ChickenAge");
					this.OnChickenAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Cage", Storage="_Cages", ThisKey="Id", OtherKey="IdChicken")]
		public EntitySet<Cage> Cages
		{
			get
			{
				return this._Cages;
			}
			set
			{
				this._Cages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Production", Storage="_Productions", ThisKey="Id", OtherKey="IdChicken")]
		public EntitySet<Production> Productions
		{
			get
			{
				return this._Productions;
			}
			set
			{
				this._Productions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Breed_Chicken", Storage="_Breed", ThisKey="IdBreed", OtherKey="Id", IsForeignKey=true)]
		public Breed Breed
		{
			get
			{
				return this._Breed.Entity;
			}
			set
			{
				Breed previousValue = this._Breed.Entity;
				if (((previousValue != value) 
							|| (this._Breed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Breed.Entity = null;
						previousValue.Chickens.Remove(this);
					}
					this._Breed.Entity = value;
					if ((value != null))
					{
						value.Chickens.Add(this);
						this._IdBreed = value.Id;
					}
					else
					{
						this._IdBreed = default(int);
					}
					this.SendPropertyChanged("Breed");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Chicken = this;
		}
		
		private void detach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Chicken = null;
		}
		
		private void attach_Productions(Production entity)
		{
			this.SendPropertyChanging();
			entity.Chicken = this;
		}
		
		private void detach_Productions(Production entity)
		{
			this.SendPropertyChanging();
			entity.Chicken = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diets")]
	public partial class Diet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Number;
		
		private EntitySet<Breed> _Breeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    #endregion
		
		public Diet()
		{
			this._Breeds = new EntitySet<Breed>(new Action<Breed>(this.attach_Breeds), new Action<Breed>(this.detach_Breeds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diet_Breed", Storage="_Breeds", ThisKey="Id", OtherKey="IdDietNumber")]
		public EntitySet<Breed> Breeds
		{
			get
			{
				return this._Breeds;
			}
			set
			{
				this._Breeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Breeds(Breed entity)
		{
			this.SendPropertyChanging();
			entity.Diet = this;
		}
		
		private void detach_Breeds(Breed entity)
		{
			this.SendPropertyChanging();
			entity.Diet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Production")]
	public partial class Production : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdChicken;
		
		private System.DateTime _Data;
		
		private int _NumberOfEggs;
		
		private EntityRef<Chicken> _Chicken;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdChickenChanging(int value);
    partial void OnIdChickenChanged();
    partial void OnDataChanging(System.DateTime value);
    partial void OnDataChanged();
    partial void OnNumberOfEggsChanging(int value);
    partial void OnNumberOfEggsChanged();
    #endregion
		
		public Production()
		{
			this._Chicken = default(EntityRef<Chicken>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdChicken", DbType="Int NOT NULL")]
		public int IdChicken
		{
			get
			{
				return this._IdChicken;
			}
			set
			{
				if ((this._IdChicken != value))
				{
					if (this._Chicken.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChickenChanging(value);
					this.SendPropertyChanging();
					this._IdChicken = value;
					this.SendPropertyChanged("IdChicken");
					this.OnIdChickenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Date NOT NULL")]
		public System.DateTime Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfEggs", DbType="Int NOT NULL")]
		public int NumberOfEggs
		{
			get
			{
				return this._NumberOfEggs;
			}
			set
			{
				if ((this._NumberOfEggs != value))
				{
					this.OnNumberOfEggsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfEggs = value;
					this.SendPropertyChanged("NumberOfEggs");
					this.OnNumberOfEggsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chicken_Production", Storage="_Chicken", ThisKey="IdChicken", OtherKey="Id", IsForeignKey=true)]
		public Chicken Chicken
		{
			get
			{
				return this._Chicken.Entity;
			}
			set
			{
				Chicken previousValue = this._Chicken.Entity;
				if (((previousValue != value) 
							|| (this._Chicken.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chicken.Entity = null;
						previousValue.Productions.Remove(this);
					}
					this._Chicken.Entity = value;
					if ((value != null))
					{
						value.Productions.Add(this);
						this._IdChicken = value.Id;
					}
					else
					{
						this._IdChicken = default(int);
					}
					this.SendPropertyChanged("Chicken");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdWorkshop;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _Passport;
		
		private int _Salary;
		
		private System.Nullable<bool> _Fired;
		
		private EntitySet<Cage> _Cages;
		
		private EntityRef<Workshop> _Workshop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdWorkshopChanging(int value);
    partial void OnIdWorkshopChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnSalaryChanging(int value);
    partial void OnSalaryChanged();
    partial void OnFiredChanging(System.Nullable<bool> value);
    partial void OnFiredChanged();
    #endregion
		
		public Worker()
		{
			this._Cages = new EntitySet<Cage>(new Action<Cage>(this.attach_Cages), new Action<Cage>(this.detach_Cages));
			this._Workshop = default(EntityRef<Workshop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWorkshop", DbType="Int NOT NULL")]
		public int IdWorkshop
		{
			get
			{
				return this._IdWorkshop;
			}
			set
			{
				if ((this._IdWorkshop != value))
				{
					if (this._Workshop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWorkshopChanging(value);
					this.SendPropertyChanging();
					this._IdWorkshop = value;
					this.SendPropertyChanged("IdWorkshop");
					this.OnIdWorkshopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int NOT NULL")]
		public int Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fired", DbType="Bit")]
		public System.Nullable<bool> Fired
		{
			get
			{
				return this._Fired;
			}
			set
			{
				if ((this._Fired != value))
				{
					this.OnFiredChanging(value);
					this.SendPropertyChanging();
					this._Fired = value;
					this.SendPropertyChanged("Fired");
					this.OnFiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Cage", Storage="_Cages", ThisKey="Id", OtherKey="IdWorker")]
		public EntitySet<Cage> Cages
		{
			get
			{
				return this._Cages;
			}
			set
			{
				this._Cages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workshop_Worker", Storage="_Workshop", ThisKey="IdWorkshop", OtherKey="Id", IsForeignKey=true)]
		public Workshop Workshop
		{
			get
			{
				return this._Workshop.Entity;
			}
			set
			{
				Workshop previousValue = this._Workshop.Entity;
				if (((previousValue != value) 
							|| (this._Workshop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workshop.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Workshop.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._IdWorkshop = value.Id;
					}
					else
					{
						this._IdWorkshop = default(int);
					}
					this.SendPropertyChanged("Workshop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Cages(Cage entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
}
#pragma warning restore 1591
